#!/usr/bin/env ruby
require "thor"
require 'open3'
require 'json'
require_relative("../lib/crucible.rb")
module Golden
  class Cli < Thor
    desc "add [path]", "add library at [path] to the list of known packages"
    method_option :verbose, :aliases => "-v", :desc => "Build with verbose logging"
    def add(path=nil)
      self.load(options)
      if(!path)
        path = Dir.pwd
      end
      @crucible.add(path)
      self.save
    end

    desc "build [fileName]", "build library named [fileName]"
    method_option :verbose, :aliases => "-v", :desc => "Build with verbose logging"
    def build(fileName)
      self.load(options)
      @crucible.build(fileName,Dir.pwd)
      self.save
    end

    desc "clear ", "forget all known libraries"
    method_option :force, :aliases => "-f", :desc => "Clear without confirmation."
    def clear
      self.load(options)
      if(!options[:force])
        puts "Golden will forget all known libraries (#{@crucible.packages.keys.length}). Do you want to proceed? (Yes/No)"
        response = STDIN.gets.chomp
        if(response == "Yes")
          @crucible.clear
          puts "Golden library cache cleared."
        else
          puts "clear cancelled. To clear Golden libraries, run 'golden clear' again and respond with 'Yes' (case sensitive)."
        end
      else
        @crucible.clear
        puts "Golden library cache cleared."
      end
      self.save
    end

    desc "list ", "list all libraries built with golden"
    method_option :verbose, :aliases => "-v", :desc => "List with package detail"
    def list
      self.load(options)
      if(!@crucible.packages || @crucible.packages.keys.length == 0)
        puts "No libraries have yet been built. Navigate to a go project and build one using 'golden build (LibraryName).'"
      else
        puts "Golden has access to the following libraries:"
        if(@crucible.verbose?)
          @crucible.packages.each do |name, location|
            puts "#{name}\t#{location}"
          end
        else
          puts @crucible.packages.keys
        end
      end
    end

    desc "install [fileName]", "install a library built with golden to the current ruby project"
    method_option :verbose, :aliases => "-v", :desc => "Install with verbose logging"
    def install(packageName)
      self.load(options)
      if(!!@crucible.packages[packageName])
        puts "installing #{packageName}."
        @crucible.install(packageName)
      else
        puts "No libraries named #{packageName} are yet known to golden. You can list all known libraries with 'golden list'"
      end
    end

    desc "version", "show gem version info"
    def version
      puts "Golden v#{Golden.gem_version}"
    end

    protected
    def load(options=nil)
      @crucible = Golden::Crucible.new(options)
    end
    def save
      @crucible.save
    end
  end
end

Golden::Cli.start(ARGV)
